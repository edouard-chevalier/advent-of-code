// See https://aka.ms/new-console-template for more information


using System.Collections;
using System.Text;

Console.WriteLine("Hello, World!");

const string inputReal = @"\.........-......|...../................................-...........|.../.\\...\|...................|.........
../..\...............-../............\.........-......-................././........|......................|...
......../..-........../................../...|.....-......................\.....-..............|............/|
......-......-............................\..\............../................./.-.................\.....|.\|..
...-....-|....................-...-..../...................-....../...........|.............\.....-...........
..\............../..../................|...........|/......|..........-\.........|...../....................|.
\...........\.\....../...|..........--.................|......//...../..-.....|.....-.........................
..................................................|...........\.\.................../.....................\...
.....-...................-............./.......................|............/...|..........................-..
..............-......\..............\................................-.|../................|....|../\....|....
./../\..............-..............|.........................|\................................|.-./.....|....
..........\....-................./........../............../........\-..........\....-........................
.........-....../.............\../-......-.............\........\......./......-|..\.........\............-...
......-....|.......|.............................\..-.............\......-......................|......|......
....\......../.............................||....-.............-.........................\........../.........
........-......................................................\.........../...|./............-|..............
......\..-........|./..................\../....|.........-\...-..-....\...-................\..................
|./.....\.-......../.-|.............\..\.\......-.|............/.|..\|....................../.................
................................../..-........\.\..|.-..|/...-...............-............\........-..../.....
.......|............\../......\...../.......................|........|...-.|...\...-....\......|..............
.................-......./........../.......|/........|....-\........../..............-................../....
..../...................-..\.........|................../..|.../...............|-\............../.............
.............................|....../............................|..|.........../....../....-.|..||....\......
.....//.........\..........\.|...-./.......|.-..\...\.......\.-.............../.....|..............-.|........
.-...........\.\..........\|..\.....\.|...........--.............\.....-./.......\................../.........
............\....................................\.......-....../.....\....../....-.....................-.....
\.......\...-.|......./\..|...\......|......../.....-.....|......./................./.........../.............
/.|.....................................................\./.........\...|......|.......................|./..-.
....|............./....\...-.\...../.......\.................|.............|......\..../.../..\...........\...
..........................|...........|.../............\..\....\............-|...................\.../......\.
.......|\.\............./...../.......././..../.....-..|...\.......|..........\............/-.................
.|\....|.....-.-......\-..........\.....................\...........................-...|.....|..-...........|
/\......|....-.............................-/....|..|........./.........................................../.-.
...............................|....................||....|.|....|./............./.|........./............\...
.......-......................./.............\....-....-...-..\........................................-......
.......-....|.........../................-.....................................|............../...............
.-..................\.../...../\...\.......................\...............-...//..\......\-.|..........|.....
..\............................././\............../....-..........|..\....\.-./...............................
...-.|/...........||......\...-.........................................|.....................................
......|.././...........|......................./.||................\........\........|.|.....\...|....|.......
...-......./............../.....|..-..-.|..-.......|..|....................\...\.......\........|.............
/../.................|............................/.............../....-/..|.....\...|........................
.........-.........|............/.......-.............-...../.\|.......\...-..\.-.....|..../...........-\..|..
......................................\........|..../....|.......\......-.................|...................
...\.......|.....|....\....................-............-....|......\.........\...................|...........
.....\.............\...-........|.............................-|......./.........-............//.......|......
............/../...........-/.........................-...|...|...\............./....-..|..........\\.........
..\......................\/./.........................\..-............-\..-...................................
............................\...|.........|...|.\.......|............/.........|.................\............
............|..|...........\..................../........|............-....-./.....\.-..-.................../.
...................-.-.......-.\............-....\........-./.|../|.../.............\.......\............-....
..../............../........../\...............-.............../......|.\/.........../......|.................
...\......\.....................\..|...............-.......................-.-|....../..................-.....
.........\...\.............|........../.........................................................-...\......-..
..-...........-\.........\....\.............../........\./........../....\......../...........................
............|.............-.../.................|......../..-.........../............./...................\..\
........-...................................-.....\-.........|............../..../...\\.|..........\....-.....
..\..\.\.\.........../..|...\............/...|......................-.........................|...............
\.../...../..........|.....\...|./...|............./......\........................-.....-.....\..............
|....................-..-............................../...../..............-.../...-...|../../.\.............
................/......-...|....|..........\\......-..............|\........|./.\...|.......................|.
........../....................|./..........................|..................-.........|.........|..........
..../.....\...|.......|../....................\...\..-...\...\...........|............./.-.....--.............
.........|-..........................\..-......--......../................\......\...../.|...|....../....-....
.......|.............\............./...............././/../..........\.........|\..........|..................
....\........|.../......./....\./...//.............\..................|./.....................................
..........-.|\............/..-...........\........-....|....../........-.|.................-/.-.........|.../|
.....-\........\........|.|...............................-...........\./..........................-........\.
............../........./../--|.........................-....................\......-..\...\..........\......\
..|...............................\........\......\..\.....-\............|....................................
..\|.................\-......|...............\.........|.|...|........................|..../......-...-|...-..
...........................\......................-.............................|........./......./....-......
.........-..../........../.......|../.....-.........................../.../...........|....-./.\..............
.-........./..-/...........\.......-.......-.........//.-.-......................................|...-........
........../.....|...........\....../\............-......-......../....................|......................-
.......||....-.../....|....../....-.......|...................................................................
.....|./........\.-.....|..................|....\....../......\.......-|.....|../....\...\.\........|./......-
.-.|./............-....../............-..................|....|......-.....\................||.\\.............
....-...-........./.........../.........\....|.\....|..\.\............................-.......//......\..-.\..
...../.........................................|..........|.-|..\./............\.-.../......./............-..|
.../..........\..............\..../...\.........\................./.|....../........|............-...-.-..../.
..\.\................\....../....................|......../\|...../...\....-..../...\.....|..../...\..........
......\..-.\........................-.....................-............|.|.............-...-..................
................\...\...../../....../.../................/.........\.\.................|......................
......................|..................-./.........\..\.......-..........|..\.......\...-...|...............
..........-.........................-................................./......../.....-.|......................
.......-\............./...............-............|.....................-..\.................-......\....-...
..........................................\......./......\........-|..|.....\........\......./................
........//...........-........../......./..............|...../..-..................../...\......-..........-..
./....|..-|...|......-.............\.|.........................\...............-\.............................
|....................|....................../............................../...........\...|...-..............
\......./....|.../.|....................|..............|..................|................\..................
.........|......\.............../....\...................................|.\........./..-.................|./.
......../..................\..................../.........................||./.-.............../..............
......................./.........|.|........-../........./.....|............./......|......-....|...../.......
................|......./............\...-......../..................\..\..../.......\.../.........-/.........
.........-.....\......-.....................-..-.........//...........................|...\-............../...
.....|............-...../.\......................|........|...........\..........|./......./.\.........\../...
..\..........-.../.......|......./.................../............\............|......../....|................
.....\....................-...........-......//...........\....|..\...-.....................\.............../.
..-.....|......\.......|.../......................\...|...\..\.....|...........................\..........|...
....-....-...|.\-...-..\............../......-./...........\/............\-..|.........................\......
......./.....-|.|.......|....\|||......\.............................................\......-.................
.................-\................/.-...............|............|...|.-......-..............................
...|.............|...............|.......-.................-.........|.../..................................|.
..-.../.....-.........................-....|......|/...../....\.............................-...............-.
.|.........-../....................../............|................\.....|........\...........................
.\\............\................-../.../....\.................................|.-.....|.....\.........-.....|.
.............../..................../..\.............-..\.......\...\..../..-........-..../-.....|............
\.................................-..............|...\./......../...........................|.........|.......";
const string inputTest = @".|...\....
|.-.\.....
.....|-...
........|.
..........
.........\
..../.\\..
.-.-/..|..
.|....-|.\
..//.|....";

void Part1(string input) {
    var grid = input.Split(Environment.NewLine).Select(l => l.ToCharArray()).ToArray();

    bool HasCell(int i, int j)
    {
        return i>= 0 && i < grid.Length && j >= 0 && j < grid[0].Length;
    }

    int posX = 0;int posY = 0;var currentDirection = Direction.Right;
    

    bool GoRight() {
        if( HasCell(posX, posY + 1)) {
            posY++;
            return true;
        }

        return false;
    }
    bool GoLeft() {
        if( HasCell(posX, posY - 1)) {
            posY--;
            return true;
        }

        return false;
    }
    bool GoUp() {
        if( HasCell(posX - 1, posY)) {
            posX--;
            return true;
        }

        return false;
    }
    bool GoDown() {
        if( HasCell(posX + 1, posY)) {
            posX++;
            return true;
        }

        return false;
    }
    
    Stack<(int x, int y, Direction direction)> stack = new ();
    HashSet<(int x, int y, Direction direction)> visited = new ();

    stack.Push((0, 0, Direction.Right));

    while (stack.TryPop(out var newStart))
    {
        if( visited.Contains((newStart.x, newStart.y, newStart.direction))) {
            continue;
        }
        currentDirection = newStart.direction;
        posX = newStart.x;
        posY = newStart.y;

        var c = grid[posX][posY];
            visited.Add((posX, posY, currentDirection));
        if (currentDirection == Direction.Right) {
            if (( c == '.' || c == '-') && GoRight()) {
                stack.Push((posX, posY, currentDirection));
            }

            if ((c == '|' || c == '/' ) && GoUp()) {
                stack.Push((posX, posY, Direction.Up));
                GoDown();
            }
            if ((c == '|' || c == '\\' ) && GoDown()) {
                stack.Push((posX, posY, Direction.Down));
                GoUp();
            }
        }
        if( currentDirection == Direction.Left) {
            if (( c == '.' || c == '-') && GoLeft()) {
                stack.Push((posX, posY, currentDirection));
            }

            if ((c == '|' || c == '/' ) && GoDown()) {
                stack.Push((posX, posY, Direction.Down));
                GoUp();
            }
            if ((c == '|' || c == '\\' ) && GoUp()) {
                stack.Push((posX, posY, Direction.Up));
                GoDown();
            }
        }
        if( currentDirection == Direction.Up) {
            if (( c == '.' || c == '|') && GoUp()) {
                stack.Push((posX, posY, currentDirection));
            }

            if ((c == '-' || c == '/' ) && GoRight()) {
                stack.Push((posX, posY, Direction.Right));
                GoLeft();
            }
            if ((c == '-' || c == '\\' ) && GoLeft()) {
                stack.Push((posX, posY, Direction.Left));
                GoRight();
            }
        }
        if( currentDirection == Direction.Down) {
            if (( c == '.' || c == '|') && GoDown()) {
                stack.Push((posX, posY, currentDirection));
            }

            if ((c == '-' || c == '/' ) && GoLeft()) {
                stack.Push((posX, posY, Direction.Left));
                GoRight();
            }
            if ((c == '-' || c == '\\' ) && GoRight()) {
                stack.Push((posX, posY, Direction.Right));
                GoLeft();
            }
        }
    }

    for (int i = 0; i < grid.Length; i++)
    {
        var sb = new StringBuilder();
        for (int j = 0; j < grid[i].Length; j++) {
            if( visited.Contains((i,j, Direction.Down))) {
                sb.Append('v');
            } else if( visited.Contains((i,j, Direction.Up))) {
                sb.Append('^');
            } else if( visited.Contains((i,j, Direction.Left))) {
                sb.Append('<');
            } else if( visited.Contains((i,j, Direction.Right))) {
                sb.Append('>');
            } else {
                sb.Append(grid[i][j]);
            }
        }
        Console.WriteLine(sb);
    }


    Console.WriteLine(visited.Select( c => (c.x,c.y)).Distinct().Count());
}

void Part2(string input) {
    var grid = input.Split(Environment.NewLine).Select(l => l.ToCharArray()).ToArray();

    bool HasCell(int i, int j)
    {
        return i>= 0 && i < grid.Length && j >= 0 && j < grid[0].Length;
    }

    int posX = 0;int posY = 0;var currentDirection = Direction.Right;
    

    bool GoRight() {
        if( HasCell(posX, posY + 1)) {
            posY++;
            return true;
        }

        return false;
    }
    bool GoLeft() {
        if( HasCell(posX, posY - 1)) {
            posY--;
            return true;
        }

        return false;
    }
    bool GoUp() {
        if( HasCell(posX - 1, posY)) {
            posX--;
            return true;
        }

        return false;
    }
    bool GoDown() {
        if( HasCell(posX + 1, posY)) {
            posX++;
            return true;
        }

        return false;
    }

    var starts = new List<(int x, int y, Direction direction)>();
    for (int i = 0; i < grid.Length; i++) {
        starts.Add((i, 0, Direction.Right));
        starts.Add((i, grid[0].Length - 1, Direction.Left));
    }

    for (int j = 0; j < grid[0].Length; j++)
    {
        starts.Add((0, j, Direction.Down));
        starts.Add((grid.Length - 1, j, Direction.Up));
    }

    int Score((int x, int y, Direction direction) start)
    {

        Stack<(int x, int y, Direction direction)> stack = new();
        HashSet<(int x, int y, Direction direction)> visited = new();

        stack.Push(start);

        while (stack.TryPop(out var newStart))
        {
            if (visited.Contains((newStart.x, newStart.y, newStart.direction)))
            {
                continue;
            }

            currentDirection = newStart.direction;
            posX = newStart.x;
            posY = newStart.y;

            var c = grid[posX][posY];
            visited.Add((posX, posY, currentDirection));
            if (currentDirection == Direction.Right)
            {
                if ((c == '.' || c == '-') && GoRight())
                {
                    stack.Push((posX, posY, currentDirection));
                }

                if ((c == '|' || c == '/') && GoUp())
                {
                    stack.Push((posX, posY, Direction.Up));
                    GoDown();
                }

                if ((c == '|' || c == '\\') && GoDown())
                {
                    stack.Push((posX, posY, Direction.Down));
                    GoUp();
                }
            }

            if (currentDirection == Direction.Left)
            {
                if ((c == '.' || c == '-') && GoLeft())
                {
                    stack.Push((posX, posY, currentDirection));
                }

                if ((c == '|' || c == '/') && GoDown())
                {
                    stack.Push((posX, posY, Direction.Down));
                    GoUp();
                }

                if ((c == '|' || c == '\\') && GoUp())
                {
                    stack.Push((posX, posY, Direction.Up));
                    GoDown();
                }
            }

            if (currentDirection == Direction.Up)
            {
                if ((c == '.' || c == '|') && GoUp())
                {
                    stack.Push((posX, posY, currentDirection));
                }

                if ((c == '-' || c == '/') && GoRight())
                {
                    stack.Push((posX, posY, Direction.Right));
                    GoLeft();
                }

                if ((c == '-' || c == '\\') && GoLeft())
                {
                    stack.Push((posX, posY, Direction.Left));
                    GoRight();
                }
            }

            if (currentDirection == Direction.Down)
            {
                if ((c == '.' || c == '|') && GoDown())
                {
                    stack.Push((posX, posY, currentDirection));
                }

                if ((c == '-' || c == '/') && GoLeft())
                {
                    stack.Push((posX, posY, Direction.Left));
                    GoRight();
                }

                if ((c == '-' || c == '\\') && GoRight())
                {
                    stack.Push((posX, posY, Direction.Right));
                    GoLeft();
                }
            }
        }

        /*for (int i = 0; i < grid.Length; i++)
        {
            var sb = new StringBuilder();
            for (int j = 0; j < grid[i].Length; j++)
            {
                if (visited.Contains((i, j, Direction.Down)))
                {
                    sb.Append('v');
                }
                else if (visited.Contains((i, j, Direction.Up)))
                {
                    sb.Append('^');
                }
                else if (visited.Contains((i, j, Direction.Left)))
                {
                    sb.Append('<');
                }
                else if (visited.Contains((i, j, Direction.Right)))
                {
                    sb.Append('>');
                }
                else
                {
                    sb.Append(grid[i][j]);
                }
            }

            Console.WriteLine(sb);
        }*/


        var count = visited.Select(c => (c.x, c.y)).Distinct().Count();
        Console.WriteLine(count);
        return count;
    }

    var res = 0;
    foreach (var s in starts)
    {
        res = Math.Max(res, Score(s));
    }
    Console.WriteLine(res);
}

Part2(inputReal);
public enum Direction
{
    Up,
    Down,
    Left,
    Right
}