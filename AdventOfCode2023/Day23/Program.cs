// See https://aka.ms/new-console-template for more information


using System.Collections;
using Template;

Console.WriteLine("Hello, World!");

const string inputReal = @"#.###########################################################################################################################################
#.....#...#####.......#.........#.......#...........#.....#.......#.....#...#...#...................#...#...#...#...#...#...#.......#.......#
#####.#.#.#####.#####.#.#######.#.#####.#.#########.#.###.#.#####.#.###.#.#.#.#.#.#################.#.#.#.#.#.#.#.#.#.#.#.#.#.#####.#.#####.#
#.....#.#.###...#.....#.#.......#.#.....#.........#...#...#.#.....#...#.#.#.#.#.#.................#.#.#...#.#.#...#.#.#.#.#.#.#.....#.#.....#
#.#####.#.###.###.#####.#.#######.#.#############.#####.###.#.#######.#.#.#.#.#.#################.#.#.#####.#.#####.#.#.#.#.#.#.#####.#.#####
#.#...#.#.#...#...#.....#.......#.#.#.....###...#.....#.....#...#...#.#.#.#.#.#.###...###...#.....#.#...#...#.#.....#.#.#.#.#.#.#.....#.....#
#.#.#.#.#.#.###v###.###########.#.#.#.###.###.#.#####.#########.#.#.#.#.#.#.#.#.###.#.###.#.#.#####.###.#.###.#.#####.#.#.#.#.#.#.#########.#
#.#.#.#.#...###.>...#...#.......#.#.#...#.#...#.#...#.#.........#.#.#.#.#.#.#.#...#.#...#.#...#...#.>.>.#...#.#...#...#.#.#.#.#...#...#...#.#
#.#.#.#.#######v#####.#.#.#######.#.###.#.#.###.#.#.#.#.#########.#.#.#.#.#.#.###.#.###.#.#####.#.###v#####.#.###.#.###.#.#.#.#####.#.#.#.#.#
#.#.#.#...#.....#.....#...#.....#.#.#...#.#...#...#...#...#.....#.#.#.#.#.#.#.#...#...#.#.......#...#.....#.#...#.#.#...#.#...###...#...#.#.#
#.#.#.###.#.#####.#########.###.#.#.#.###.###.###########.#.###.#.#.#.#.#.#.#.#.#####.#.###########.#####.#.###.#.#.#.###.#######.#######.#.#
#.#.#...#.#.....#...#...###.#...#.#.#...#...#.......#.....#.#...#.#...#.#.#...#.#.....#.###...#.....#...#.#.#...#.#.#.....#...#...###...#...#
#.#.###.#.#####.###.#.#.###.#.###.#.###.###.#######.#.#####.#.###.#####.#.#####.#.#####.###.#.#.#####.#.#.#.#.###.#.#######.#.#.#####.#.#####
#.#...#...#.....#...#.#...#.#.....#.###...#.###.....#.#.....#.###.....#.#.#.....#.#.....#...#...#.....#...#...###...#.......#...#.....#.....#
#.###.#####.#####.###.###.#.#######.#####.#.###.#####.#.#####.#######.#.#.#.#####.#.#####.#######.###################.###########.#########.#
#.#...#...#.....#.#...#...#...#.....#.....#...#.....#.#.#.....#.......#.#.#.#...#.#.#...#.......#.......#.......#.....#...#...#...#...#...#.#
#.#.###.#.#####.#.#.###.#####.#.#####.#######.#####.#.#.#.#####.#######.#.#.#.#.#.#.#.#.#######.#######.#.#####.#.#####.#.#.#.#.###.#.#.#.#.#
#.#.#...#.......#...#...#...#.#.>.>.#.....#...#...#.#.#.#.#...#.......#.#.#.#.#.#.#.#.#.###...#.#.......#.#...#.#.......#...#...#...#...#...#
#.#.#.###############.###.#.#.###v#.#####.#.###.#.#.#.#.#.#.#.#######.#.#.#.#.#.#.#.#.#.###.#.#.#.#######.#.#.#.#################.###########
#.#.#.#...#...#...###.....#.#.#...#...#...#.#...#.#.#.#.#.#.#...>.>.#.#.#.#.#.#.#.#.#.#.>.>.#.#.#.#...###.#.#...#...#...#...#...#...###...###
#.#.#.#.#.#.#.#.#.#########.#.#.#####.#.###.#.###.#.#.#.#.#.#####v#.#.#.#.#.#.#.#.#.#.###v###.#.#.#.#.###.#.#####.#.#.#.#.#.#.#.###.###.#.###
#.#.#.#.#.#.#...#.....#.....#.#.#...#...###...#...#.#.#.#.#.#.....#.#.#.#.#.#.#...#...#...#...#.#.#.#.....#...###.#...#...#...#...#.....#...#
#.#.#.#.#.#.#########.#.#####.#.#.#.###########.###.#.#.#.#.#.#####.#.#.#.#.#.#########.###.###.#.#.#########.###.###############.#########.#
#.#.#...#...#.........#...#...#...#.......#.....#...#...#...#.....#...#.#.#.#.#.....#...###.....#.#.#...#...#...#...#...........#...........#
#.#.#########.###########.#.#############.#.#####.###############.#####.#.#.#.#.###.#.###########.#.#.#.#.#.###.###.#.#########.#############
#.#.#...#.....#...#...###.#.#.........#...#.#...#.#.......###...#.....#...#...#...#.#.......#.....#.#.#...#.....#...#.###.......#...........#
#.#.#.#.#.#####.#.#.#.###.#.#.#######.#.###.#.#.#.#.#####.###.#.#####.###########.#.#######.#.#####.#.###########.###.###.#######.#########.#
#...#.#.#.....#.#...#...#...#...#...#...###...#...#.#.....#...#.#.....#...#...###.#.#.....#.#.#.....#...........#...#...#.#...#...#.........#
#####.#.#####v#.#######.#######.#.#.###############.#.#####.###.#.#####.#.#.#.###.#.#.###.#.#.#.###############.###.###.#.#.#.#.###.#########
#.....#.#...#.>.#.......#...###...#.#.....#.....###.#.#...#...#.#.###...#...#.....#...###...#...#...............###.....#...#.#.#...#...#...#
#.#####.#.#.#v###.#######.#.#######.#.###.#.###.###.#.#.#.###.#.#v###.###########################.###########################.#.#.###.#.#.#.#
#.....#...#...#...#.....#.#.#...#...#.#...#...#...#.#.#.#.#...#.>.>.#...................#.........#...............#.........#...#.....#...#.#
#####.#########.###.###.#.#.#.#.#.###.#.#####.###.#.#.#.#.#.#####v#.###################.#.#########.#############.#.#######.###############.#
#.....#.......#...#...#.#.#.#.#.#.....#...###...#.#.#.#.#.#...###.#.#...#...#...........#...........#.............#.....#...#...#.....#...#.#
#.#####.#####.###.###.#.#.#.#.#.#########.#####.#.#.#.#.#.###.###.#.#.#.#.#.#.#######################.#################.#.###.#.#.###.#.#.#.#
#.......#.....###...#.#.#.#.#.#...........#...#.#...#...#.#...#...#.#.#.#.#.#.......#...#...#.........#...........#...#.#.....#...###...#...#
#########.#########.#.#.#.#.#.#############.#.#.#########.#.###.###.#.#.#.#.#######.#.#.#.#.#.#########.#########.#.#.#.#####################
#.......#.....#...#.#.#...#.#.......#.....#.#.#.....#.....#.#...#...#.#.#.#.###.....#.#.#.#.#.........#...#.......#.#.#.................#...#
#.#####.#####.#.#.#.#.#####.#######.#.###.#.#.#####.#.#####.#.###.###.#.#.#.###v#####.#.#.#.#########v###.#.#######.#.#################.#.#.#
#.....#.......#.#...#.....#.#...###.#...#.#.#.#...#.#...#...#...#...#.#.#.#.#.>.>.....#.#.#.#...#...>.>.#.#.###...#.#.#...###...........#.#.#
#####.#########.#########.#.#.#.###v###.#.#.#.#.#.#.###.#.#####.###.#.#.#.#.#.#v#######.#.#.#.#.#.###v#.#.#.###.#.#.#.#.#.###v###########.#.#
#####.........#.......#...#...#...>.>.#.#.#.#.#.#...###.#.#.....###.#.#...#...#...#.....#.#.#.#.#.#...#...#.....#.#.#...#...>.###...#...#.#.#
#############.#######.#.###########v#.#.#.#.#.#.#######.#.#.#######.#.###########.#.#####.#.#.#.#.#.#############.#.#########v###.#.#.#.#.#.#
#.....#.......###.....#.......###...#...#...#.#...###...#.#.......#.#...#.........#...#...#.#.#.#.#.......#.......#.#.........#...#.#.#.#.#.#
#.###.#.#########.###########.###.###########.###.###.###.#######.#.###.#.###########.#.###.#.#.#.#######.#.#######.#.#########.###.#.#.#.#.#
#...#.#.........#.....#...#...#...#...#...###.....#...#...###.....#.....#...........#.#.###...#.#.#.......#...#...#.#...#.....#...#.#.#.#.#.#
###.#.#########.#####.#.#.#.###.###.#.#.#.#########.###.#####.#####################.#.#.#######.#.#.#########.#.#.#.###.#.###.###.#.#.#.#.#.#
#...#...........#.....#.#...###.....#...#.....#...#.....#...#.......#.....###...#...#...#...###...#.........#.#.#.#.###.#.#...#...#...#...#.#
#.###############.#####.#####################.#.#.#######.#.#######.#.###.###.#.#.#######.#.###############.#.#.#.#.###.#.#.###.###########.#
#...#.........#...#.....#.....###...........#...#...#.....#.........#...#.#...#.#...#.....#...###...#.......#...#...###.#.#.....#...#...#...#
###.#.#######.#.###.#####.###.###.#########.#######.#.#################.#.#.###.###.#.#######.###.#.#.#################.#.#######.#.#.#.#.###
#...#.#.......#.....#.....#...#...#...#...#.........#...........#.....#.#.#...#.....#.#.......#...#.#...###...###.....#...###...#.#...#...###
#.###.#.#############.#####.###.###.#.#.#.#####################.#.###.#.#.###v#######.#.#######.###.###.###.#.###.###.#######.#.#.###########
#.....#...........#...#...#.###.....#.#.#...#.....#...###...#...#...#.#.#.#.>.>.....#.#.#...#...#...###.....#...#.#...#.......#...###.......#
#################.#.###.#.#.#########.#.###.#.###.#.#.###.#.#.#####.#.#.#.#.#v#####.#.#.#.#.#.###.#############.#.#.###.#############.#####.#
#...#...#.........#.....#.#.#...#.....#.#...#...#...#.#...#.#.....#.#...#.#.#.#.....#.#.#.#.#.#...#...#.........#.#.###.....#.....#...#...#.#
#.#.#.#.#.###############.#.#.#.#v#####.#.#####.#####.#.###.#####.#.#####.#.#.#.#####.#.#.#.#.#.###.#.#v#########.#.#######.#.###.#.###.#.#.#
#.#.#.#.#.....#...#...#...#.#.#.>.>.....#.#...#.#.....#...#.......#.....#...#.#.#...#.#.#.#.#.#.#...#.>.>...#...#.#...#...#...###.#.#...#...#
#.#.#.#.#####.#.#.#.#.#.###.#.###v#######.#.#.#.#.#######.#############.#####.#.#.#.#.#.#.#.#.#.#.#####v###.#.#.#.###.#.#.#######.#.#.#######
#.#...#...#...#.#...#.#...#...###.....#...#.#.#.#.......#.........###...#.....#...#.#.#.#.#.#.#.#.#...#...#.#.#...#...#.#.###...#...#...#...#
#.#######.#.###.#####.###.###########.#.###.#.#.#######.#########.###.###.#########.#.#.#.#.#.#.#.#.#.###.#.#.#####.###.#.###.#.#######.#.#.#
#.......#.#...#.....#.#...#...........#.#...#...#.......#.........#...###.........#.#.#.#.#...#.#.#.#.....#...#.....#...#.#...#.#...###...#.#
#######.#.###.#####.#.#.###.###########.#.#######.#######.#########.#############.#.#.#.#.#####.#.#.###########.#####.###.#.###.#.#.#######.#
#.......#.....#...#.#...###...........#.#.#.......###...#.....#...#.......#.......#...#...#.....#.#.....###.....#...#...#.#.#...#.#.###.....#
#.#############.#.#.#################.#.#.#.#########.#.#####v#.#.#######.#.###############.#####.#####.###.#####.#.###.#.#.#.###.#.###v#####
#...#.......#...#.#.....#...#.........#.#.#...#.....#.#...#.>.>.#.#.......#...............#.....#.#...#...#...#...#.#...#.#.#.#...#.#.>.#...#
###.#.#####v#.###.#####.#.#.#.#########.#.###.#.###.#.###.#.#v###.#.#####################.#####.#.#.#.###.###.#.###.#.###.#.#.#.###.#.#v#.#.#
###...#...#.>.###.......#.#.#.....#...#...#...#.#...#.#...#.#...#.#.....#.................#.....#.#.#.....###.#.#...#.#...#.#.#.###...#.#.#.#
#######.#.#v#############.#.#####.#.#.#####.###.#.###.#.###.###.#.#####.#.#################.#####.#.#########.#.#.###.#.###.#.#.#######.#.#.#
###...#.#...###...#...###.#.#####...#.....#...#.#.....#...#.#...#.......#.................#.....#.#.........#...#...#.#.....#...###...#...#.#
###.#.#.#######.#.#.#.###.#.#############.###.#.#########.#.#.###########################.#####.#.#########.#######.#.#############.#.#####.#
#...#...#.....#.#.#.#...#.#.............#.#...#...#.......#.#.....###...#...#.............#...#...#...#.....#.....#...#.........#...#.......#
#.#######.###.#.#.#.###.#.#############.#.#.#####.#.#######.#####.###.#.#.#.#.#############.#.#####.#.#.#####.###.#####.#######.#.###########
#.#.....#.###.#.#...#...#.............#...#.......#.........#.....#...#.#.#.#.....#...#...#.#.#...#.#...#...#...#...###.......#.#...........#
#.#.###.#.###.#.#####.###############.#######################.#####.###.#.#.#####.#.#.#.#.#.#.#.#.#.#####.#.###.###.#########.#.###########.#
#.#.#...#.#...#.#.....#...###.......#.#...#...#...###...#.....#...#...#...#.###...#.#...#.#.#.#.#.#.......#.#...#...#.....#...#.#...#...#...#
#.#.#.###.#.###.#.#####.#.###.#####.#.#.#.#.#.#.#.###.#.#.#####.#.###.#####.###v###.#####.#.#.#.#.#########.#.###.###.###.#.###.#.#.#.#.#.###
#...#.....#.....#.......#...#.#...#.#.#.#.#.#.#.#.#...#.#...#...#.###.....#.#.>.>.#.#.....#.#.#.#.#.........#...#.###...#.#...#.#.#.#.#.#...#
###########################.#.#.#.#.#.#.#.#.#.#.#.#.###.###.#.###.#######.#.#.#v#.#.#.#####.#.#.#.#.###########.#.#####.#.###.#.#.#.#v#.###.#
#.........#.............#...#...#.#...#.#.#.#.#.#.#...#.###...#...#.......#...#.#...#...#...#.#.#.#.....#...#...#...#...#.#...#...#.>.#...#.#
#.#######.#.###########.#.#######.#####.#.#.#.#.#.###.#.#######.###.###########.#######.#.###.#.#.#####v#.#.#.#####.#.###.#.#########v###.#.#
#.....#...#...........#...#.....#...###.#.#.#.#.#.....#.#...#...###...........#.....#...#...#.#.#...#.>.>.#...#...#.#.#...#...###...#...#.#.#
#####.#.#############.#####.###.###.###.#.#.#.#.#######.#.#.#.###############.#####.#.#####.#.#.###.#.#v#######.#.#.#.#.#####.###.#.###.#.#.#
#.....#.#...#.........#...#...#.#...#...#.#.#.#.....#...#.#.#.....#...#.......#.....#.#...#.#...#...#.#.#...###.#.#.#.#...#...#...#.....#...#
#.#####.#.#.#.#########.#.###.#.#.###.###.#.#.#####.#.###.#.#####v#.#.#.#######.#####.#.#.#.#####.###.#.#.#.###.#.#.#.###.#.###.#############
#.....#.#.#.#.......###.#...#.#.#...#...#.#.#.#...#.#...#.#.#...>.>.#.#...#...#.....#.#.#...#.....#...#...#...#.#.#...###...###.............#
#####.#.#.#.#######v###.###.#.#.###.###.#.#.#.#.#.#.###.#.#.#.###v###.###.#.#.#####.#.#.#####.#####.#########.#.#.#########################.#
#.....#...#.......#.>.#.#...#.#.#...#...#.#.#...#.#.#...#.#...#...###...#.#.#.......#...#.....#...#.#.......#...#.....#.....................#
#.###############.#v#.#.#.###.#.#v###.###.#.#####.#.#.###.#####.#######.#.#.#############.#####.#.#.#.#####.#########.#.#####################
#.#.....#...#...#...#...#.#...#.>.>.#.#...#.....#...#.#...#...#.......#...#...........###.#...#.#.#.#.....#...........#.....................#
#.#.###.#.#.#.#.#########.#.#####v#.#.#.#######.#####.#.###.#.#######.###############.###.#.#.#.#.#.#####.#################################.#
#...#...#.#.#.#.........#.#...#...#...#...#...#.#.....#.#...#.........###...........#...#.#.#.#.#.#.#...#...............###...#.............#
#####.###.#.#.#########.#.###.#.#########.#.#.#.#.#####.#.###############.#########.###.#.#.#.#.#.#.#.#.###############.###.#.#.#############
#...#.....#.#.#.........#.#...#...#.....#.#.#...#.#.....#...............#.........#.....#...#.#.#...#.#.................#...#.#.............#
#.#.#######.#.#.#########.#.#####.#.###.#.#.#####.#.###################.#########.###########.#.#####.###################.###.#############.#
#.#.......#...#.........#.#.#.....#.#...#.#.....#...#.........#.....#...#.........#.........#...#...#...........#...#...#...#.#.....#...#...#
#.#######.#############.#.#.#.#####.#.###.#####.#####.#######.#.###.#.###.#########.#######.#####.#.###########.#.#.#.#.###.#.#.###.#.#.#.###
#.......#.#...#.........#.#.#...#...#...#.......#...#.......#.#...#.#...#.........#.#...#...###...#.#...#...###...#...#...#.#...###...#.#...#
#######.#.#.#.#.#########.#.###.#.#####.#########.#.#######.#.###.#.###.#########.#.#.#.#.#####.###.#.#.#.#.#############.#.###########.###.#
#.......#...#...#.......#.#.###...#...#...#.....#.#...#.....#.....#...#.#.....#...#.#.#...#...#...#...#...#.......#.......#.....#...###.....#
#.###############.#####.#.#.#######.#.###.#.###.#.###.#.#############.#.#.###.#.###.#.#####.#.###.###############.#.###########v#.#.#########
#.................#.....#.#.#.......#.....#.#...#.#...#.........#...#...#...#.#.....#...#...#.###...............#...#.....###.>.#.#.........#
###################.#####.#.#.#############.#.###.#.###########.#.#.#######.#.#########.#.###.#################.#####.###.###.#v#.#########.#
#...................#...#...#...........###.#.###.#.#...###.....#.#.....#...#.#...#.....#...#.#...#...#.....###...###.#...#...#...#.........#
#.###################.#.###############.###.#.###.#.#.#.###v#####.#####.#.###.#.#.#.#######.#.#.#.#.#.#.###.#####.###.#.###.#######.#########
#...#...............#.#.###...#...#.....#...#...#.#.#.#.#.>.>.....#.....#...#...#.#.#...###.#.#.#.#.#.#...#.###...#...#.#...#.......###...###
###.#.#############.#.#.###.#.#.#.#.#####.#####.#.#.#.#.#.#v#######.#######.#####.#.#.#.###.#.#.#.#.#.###.#.###.###.###.#.###.#########.#.###
#...#.#...........#.#.#.....#.#.#.#.....#.....#.#.#...#...#.###.....###...#.....#...#.#...#.#.#.#.#.#.#...#.#...###...#.#...#...#.....#.#.###
#.###.#.#########.#.#.#######.#.#.#####.#####.#.#.#########.###.#######.#.#####.#####.###.#.#.#.#.#.#.#.###.#.#######.#.###.###.#.###.#.#.###
#...#.#.........#...#.#.......#.#.#...#.#...#.#.#.###...###...#...#...#.#.#...#...###...#.#.#.#.#.#.#.#.#...#...###...#.....###.#...#...#...#
###.#.#########.#####.#.#######.#.#.#.#v#.#.#.#.#.###.#.#####.###.#.#.#.#.#.#.###.#####.#.#.#.#.#.#.#.#.#.#####v###.###########.###.#######.#
###...#####...#.#...#.#.#...#...#.#.#.>.>.#...#...#...#.......###.#.#.#.#.#.#.#...#...#.#.#.#.#.#.#.#.#.#.#...>.>.#.........#...#...###.....#
###########.#.#.#.#v#.#.#.#.#.###.#.###v###########.#############.#.#.#.#.#.#.#v###.#.#.#.#.#.#.#.#.#.#.#.#.###v#.#########.#.###.#####.#####
#...........#.#...#.>.#...#.#.###...###.#...#.....#...........###.#.#...#.#.#.>.>...#.#.#.#.#.#.#.#.#.#.#...#...#...#.....#.#...#.#.....#...#
#.###########.#####v#######.#.#########.#.#.#.###.###########.###.#.#####.#.###v#####.#.#.#.#.#.#.#.#.#.#####.#####.#.###.#.###.#.#.#####.#.#
#...........#...###.....#...#...#.......#.#...#...#...#.......#...#.....#...###...###.#.#.#.#.#.#.#.#...#.....#...#.#...#.#...#...#.......#.#
###########.###.#######.#.#####.#.#######.#####.###.#.#.#######.#######.#########.###.#.#.#.#.#.#.#.#####.#####.#.#.###.#.###.#############.#
###...#...#...#.#...#...#.......#.........#...#...#.#...#...###.#...#...#...#...#...#.#.#.#.#.#.#.#.#.....#.....#.#.....#.#...#...#.........#
###.#.#.#.###.#.#.#.#.#####################.#.###.#.#####.#.###.#.#.#.###.#.#.#.###.#.#.#.#.#.#.#.#.#.#####.#####.#######.#.###.#.#.#########
#...#...#.....#...#...###.................#.#.....#.......#...#.#.#...###.#.#.#.#...#...#...#.#.#.#.#...#...#...#...#...#...#...#.#.........#
#.#######################.###############.#.#################.#.#.#######.#.#.#.#.###########.#.#.#.###.#.###.#.###.#.#.#####.###.#########.#
#...#...............#...#...............#...#.....#...#.......#...#...###.#.#.#.#...........#.#.#...###.#.#...#.....#.#.#...#...#.#.........#
###.#.#############.#.#.###############.#####.###.#.#.#.###########.#.###.#.#.#.###########.#.#.#######.#.#.#########.#.#.#.###.#.#.#########
###...#####...#...#.#.#.#...#.....#...#.....#...#...#.#.#...#.......#.#...#.#.#.#...........#.#...#...#...#...........#.#.#...#.#.#.#.......#
###########.#.#.#.#.#.#.#.#.#.###.#.#.#####.###.#####.#.#.#.#.#######.#.###.#.#.#.###########.###.#.#.#################.#.###.#.#.#.#.#####.#
#...###.....#...#...#.#.#.#.#.#...#.#.#.....#...#.....#...#.#...#.....#.#...#.#.#.#.........#.#...#.#.#...#.......#.....#.#...#.#.#...#...#.#
#.#.###.#############.#.#.#.#.#.###.#.#v#####.###.#########.###.#.#####.#.###.#.#v#.#######.#.#.###.#.#.#.#.#####.#.#####.#.###.#.#####v#.#.#
#.#.....#...#...###...#.#.#.#.#.#...#.>.>...#...#...#...#...#...#...#...#...#.#.>.>.#.......#...#...#...#.#...###...###...#.#...#...#.>.#.#.#
#.#######.#.#.#.###.###.#.#.#.#.#.#########.###.###.#.#.#.###.#####.#.#####.#.#######.###########.#######.###.#########.###.#.#####.#.#v#.#.#
#.#.......#...#.#...###.#.#.#.#.#.......###...#.#...#.#.#...#.#.....#.....#.#.###...#.....#...###.......#...#.#...###...###.#.#.....#.#.#...#
#.#.###########.#.#####.#.#.#.#.#######.#####.#.#.###.#.###v#.#.#########.#.#.###.#.#####.#.#.#########.###.#.#.#.###.#####.#.#.#####.#.#####
#.#.#...........#.....#.#.#.#.#...#...#...###.#.#...#.#.#.>.>.#...#...#...#.#.#...#.......#.#.#...###...#...#.#.#.#...#####.#.#.......#.....#
#.#.#.###############.#.#.#.#.###.#.#.###.###.#.###.#.#.#.#######.#.#.#.###.#.#.###########.#.#.#.###.###.###.#.#.#.#######.#.#############.#
#...#...........#.....#...#...#...#.#...#.#...#.#...#.#.#.......#...#.#...#.#.#.#.......#...#.#.#.#...#...#...#.#.#.......#.#.#.............#
###############.#.#############.###.###.#.#.###.#.###.#.#######.#####.###.#.#.#.#.#####.#.###.#.#.#.###.###.###.#.#######.#.#.#.#############
#...............#.............#...#...#.#.#...#.#...#.#...#...#.#.....#...#...#.#.#.....#...#.#.#.#...#.###...#.#.#.......#...#...#...#...###
#.###########################.###.###.#.#.###.#.###.#.###.#.#.#.#.#####.#######.#.#.#######.#.#.#.###.#.#####v#.#.#.#############.#.#.#.#.###
#.#...#...#.....#...#...#...#.#...#...#.#.#...#...#.#...#.#.#.#.#.....#.....#...#.#.#.....#.#.#.#...#.#...#.>.>.#.#.........#.....#.#.#.#...#
#.#.#.#.#.#.###.#.#.#.#.#.#.#.#.###.###.#.#.#####.#.###.#.#.#.#.#####.#####.#.###.#.#.###.#.#.#.###.#.###.#.#####.#########.#.#####.#.#.###.#
#...#...#...###...#...#...#...#.....###...#.......#.....#...#...#####.......#.....#...###...#...###...###...#####...........#.......#...###.#
###########################################################################################################################################.#";
const string inputTest = @"#.#####################
#.......#########...###
#######.#########.#.###
###.....#.>.>.###.#.###
###v#####.#v#.###.#.###
###.>...#.#.#.....#...#
###v###.#.#.#########.#
###...#.#.#.......#...#
#####.#.#.#######.#.###
#.....#.#.#.......#...#
#.#####.#.#.#########v#
#.#...#...#...###...>.#
#.#.#v#######v###.###v#
#...#.>.#...>.>.#.###.#
#####v#.#.###v#.#.###.#
#.....#...#...#.#.#...#
#.#########.###.#.#.###
#...###...#...#...#.###
###.###.#.###v#####v###
#...#...#.#.>.>.#.>.###
#.###.###.#.###.#.#v###
#.....###...###...#...#
#####################.#";

void Part1(string input) {
    var grid = input.Split(Environment.NewLine).Select(l=>l.ToCharArray()).ToArray();
    int nbLines = grid.Length;
    int nbCols = grid[0].Length;
    (int x, int y) start = ( 0, 1);
    (int x, int y) end = (nbLines-1, nbCols-2);

    List<(int x, int y, Direction dir)>? Next((int x, int y, Direction dir) node)
    {
        if (node.x == end.x && node.y == end.y)
        {
            return null;
        }
        var res = new List<(int x, int y, Direction dir)>(2);
        if (node.dir != Direction.Down && grid[node.x - 1][node.y] == '.' && grid[node.x][node.y] != 'v') {
            res.Add((node.x - 1, node.y, Direction.Up));
        }
        
        if( node.dir != Direction.Up && grid[node.x + 1][node.y] != '#') {
            res.Add((node.x + 1, node.y, Direction.Down));
        }
        if( node.dir != Direction.Left && grid[node.x][node.y + 1] != '#') {
            res.Add((node.x, node.y + 1, Direction.Right));
        }
        if( node.dir != Direction.Right && grid[node.x][node.y - 1] == '.' && grid[node.x][node.y] != '>') {
            res.Add((node.x, node.y - 1, Direction.Left));
        }

        if (res.Count > 2)
        {
            throw new ArgumentException();
        }
        return res;
    }
    
    var stack = new Stack<(int x, int y, Direction dir, long distance)>();
    var res = new List<long>();
    stack.Push((start.x, start.y, Direction.Down, 0));
    while( stack.Count > 0) {
        var current = stack.Pop();
        var pos = (current.x, current.y, current.dir);
        var dist = current.distance;
        while (true) {
            var next = Next(pos);
            if (next == null) {
                res.Add(dist);
                break;
            }

            dist++;
            if (next.Count > 1) {
                stack.Push((next[0].x,next[0].y,next[0].dir, dist));
                stack.Push((next[1].x,next[1].y,next[1].dir, dist));
                break;
            }
            pos=next[0];
        }
    }
    Console.WriteLine(string.Join(',', res));
    Console.WriteLine(res.Max());

}
void Part2(string input) {
    var grid = input.Split(Environment.NewLine).Select(l=>l.ToCharArray()).ToArray();
    int nbLines = grid.Length;
    int nbCols = grid[0].Length;
    (int x, int y) start = ( 0, 1);
    (int x, int y) end = (nbLines-1, nbCols-2);

    IReadOnlyList<(int x, int y, Direction dir)>? Next((int x, int y, Direction dir) node)
    {
        if (node.x == end.x && node.y == end.y)
        {
            return Array.Empty<(int x, int y, Direction dir)>();
        }
        var res = new List<(int x, int y, Direction dir)>(3);
        if (node.dir != Direction.Down && node.x > 0 && grid[node.x - 1][node.y] != '#' ) {
            res.Add((node.x - 1, node.y, Direction.Up));
        }
        
        if( node.dir != Direction.Up && grid[node.x + 1][node.y] != '#') {
            res.Add((node.x + 1, node.y, Direction.Down));
        }
        if( node.dir != Direction.Left && grid[node.x][node.y + 1] != '#') {
            res.Add((node.x, node.y + 1, Direction.Right));
        }
        if( node.dir != Direction.Right && grid[node.x][node.y - 1] != '#') {
            res.Add((node.x, node.y - 1, Direction.Left));
        }

        /*if (res.Count > 2)
        {
            throw new ArgumentException();
        }*/
        return res;
    }
    
    var graph = new Dictionary<( int x, int y, Direction dir), List<((int x, int y, Direction dir)pos, long distance)>>();
    var nodes = new HashSet<( int x, int y, Direction dir)>();
    void AddEdge((int x, int y, Direction dir) from, (int x, int y, Direction dir) to, long distance) {
        if (!graph.ContainsKey(from)) {
            graph[from] = new List<((int x, int y, Direction dir)pos, long distance)>();
        }
        graph[from].Add((to, distance));
        nodes.Add(from);
        nodes.Add(to);
    }

    ((int x, int y, Direction dir) pos, long distance) Distance(( int x, int y, Direction dir) pos) {
        var dist = 0;
        
        while (true) {
            var next = Next(pos);
            if (next == null || next.Count == 0) {
                break;
            }

            dist++;
            if (next.Count > 1) {
                break;
            }

            pos=next[0];
        }

        return (pos, dist);
    }
    var visited = new HashSet<(int x, int y, Direction dir)>();
    var stack = new Stack<(int x, int y, Direction dir)>();
    stack.Push((start.x, start.y, Direction.Down));
    while( stack.Count > 0) {
        var current = stack.Pop();
        if (!visited.Add(current)) {
            continue;
        }

        var (pos, dist) = Distance(current);
        if (dist == 0) {
            continue;
        }
        AddEdge(current, pos, dist);
        stack.Push(pos);
        foreach (var next in Next(pos)) {
            AddEdge(pos,next,0);
            stack.Push(next);
        }

    }
    var l = new List<(int x, int y, Direction dir)>();
    var perm = new HashSet<(int x, int y, Direction dir)>();
    var nonperm = new HashSet<(int x, int y, Direction dir)>(nodes);
    var temp = new HashSet<(int x, int y, Direction dir)>();
    void Visit( (int x, int y, Direction dir) node) {
        if (perm.Contains(node)) {
            return;
        }

        if (temp.Add(node))
        {
            throw new ArgumentException();
        }

        foreach (var e in graph[node])
        {
            Visit(e.pos);
        }

        temp.Remove(node);
        
        nonperm.Remove(node);
        perm.Add(node);
        l.Add(node);
    }
    while( nonperm.Count > 0) {
        var current = nonperm.First();
        Visit(current);
    }

    l.Reverse();
    
    var invGraph = new Dictionary<( int x, int y, Direction dir), List<((int x, int y, Direction dir)pos, long distance)>>();
    void AddEdgeInv((int x, int y, Direction dir) from, (int x, int y, Direction dir) to, long distance) {
        if (!invGraph.ContainsKey(from)) {
            invGraph[from] = new List<((int x, int y, Direction dir)pos, long distance)>();
        }
        invGraph[from].Add((to, distance));
    }

    foreach (var kv in graph) {
        foreach (var to in kv.Value) {
            AddEdgeInv(to.pos, kv.Key, to.distance);
        }
    }
    var longestPath = new Dictionary<(int x, int y, Direction dir), long>();
    foreach (var node in l) {
        if (node.x == end.x && node.y == end.y) {
            longestPath[node] = 0;
            continue;
        }
        var max = 0L;
        foreach (var e in invGraph[node]) {
            max = Math.Max(max, longestPath[e.pos] + e.distance);
        }

        longestPath[node] = max;
    }
    Console.WriteLine(longestPath[(end.x, end.y, Direction.Down)]);

}

void Part2b(string input) {
    var grid = input.Split(Environment.NewLine).Select(l=>l.ToCharArray()).ToArray();
    int nbLines = grid.Length;
    int nbCols = grid[0].Length;
    (int x, int y) start = ( 0, 1);
    (int x, int y) end = (nbLines-1, nbCols-2);

    IReadOnlyList<(int x, int y, Direction dir)>? Next((int x, int y, Direction dir) node)
    {
        if (node.x == end.x && node.y == end.y)
        {
            return Array.Empty<(int x, int y, Direction dir)>();
        }
        var res = new List<(int x, int y, Direction dir)>(3);
        if (node.dir != Direction.Down && node.x > 0 && grid[node.x - 1][node.y] != '#' ) {
            res.Add((node.x - 1, node.y, Direction.Up));
        }
        
        if( node.dir != Direction.Up && grid[node.x + 1][node.y] != '#') {
            res.Add((node.x + 1, node.y, Direction.Down));
        }
        if( node.dir != Direction.Left && grid[node.x][node.y + 1] != '#') {
            res.Add((node.x, node.y + 1, Direction.Right));
        }
        if( node.dir != Direction.Right && grid[node.x][node.y - 1] != '#') {
            res.Add((node.x, node.y - 1, Direction.Left));
        }

        /*if (res.Count > 2)
        {
            throw new ArgumentException();
        }*/
        return res;
    }
    
    var graph = new List<HashSet<(int node, long distance)>>();
    var nodes = new Dictionary<( int x, int y), int>();
    int AddNode( (int x, int y) node) {
        if (!nodes.TryGetValue(node, out var res)) {
            res = graph.Count;
            nodes[node] = res;
            graph.Add(new HashSet<(int node, long distance)>());
        }

        return res;
    }
    void AddEdge((int x, int y) fromPos, (int x, int y) toPos, long distance)
    {
        var from = AddNode(fromPos);
        var to = AddNode(toPos);
        
        if( graph[from].Any( e => e.node == to)) {
            throw new ArgumentException();
        }
        graph[from].Add((to, distance));
        
        if( graph[to].Any( e => e.node == from)) {
            throw new ArgumentException();
        }
        graph[to].Add((from, distance));
    }

    ((int x, int y) pos, long distance) Distance(( int x, int y, Direction dir) pos) {
        var dist = 0;
        
        while (true) {
            var next = Next(pos);
            if (next.Count == 0) {
                break;
            }

            dist++;
            if (next.Count > 1) {
                break;
            }

            pos=next[0];
        }

        return ((pos.x, pos.y), dist);
    }
    var visited = new HashSet<(int x, int y)>();
    var stack = new Stack<(int x, int y)>();
    stack.Push((start.x, start.y));
    while( stack.Count > 0) {
        var current = stack.Pop();
        if (!visited.Add(current)) {
            continue;
        }
        if(current.x>0 && grid[current.x-1][current.y] != '#') {
            var (pos, dist) = Distance((current.x-1, current.y, Direction.Up));
            if( !visited.Contains(pos)) {
                AddEdge(current, pos, dist);
                stack.Push(pos);
            }
        }
        if(current.x<nbLines-1 && grid[current.x+1][current.y] != '#') {
            var (pos, dist) = Distance((current.x+1, current.y, Direction.Down));
            if( !visited.Contains(pos)) {
                AddEdge(current, pos, dist);
                stack.Push(pos);
            }
        }
        if(current.y>0 && grid[current.x][current.y-1] != '#') {
            var (pos, dist) = Distance((current.x, current.y-1, Direction.Left));
            if( !visited.Contains(pos)) {
                AddEdge(current, pos, dist);
                stack.Push(pos);
            }
        }
        if(current.y<nbCols-1 && grid[current.x][current.y+1] != '#') {
            var (pos, dist) = Distance((current.x, current.y+1, Direction.Right));
            if( !visited.Contains(pos)) {
                AddEdge(current, pos, dist);
                stack.Push(pos);
            }
        }
    }

    for(int node = 0; node < graph.Count; node++) {
        if (graph[node].Count == 0) {
            throw new ArgumentException();
        }

        var edges = graph[node];
        foreach (var edge in edges)
        {
            if ( !graph[edge.node].Any( e=>e.node == node && e.distance == edge.distance) ) {
                throw new ArgumentException();
            }
            if( edge.node >= node) {
                Console.WriteLine($"{node} -> {edge.node}: {edge.distance}");
            }
        }
    }
    Console.WriteLine(nodes.Count);
    Console.WriteLine(graph.Sum( e => e.Count)/2);
    Console.WriteLine($"Start: {nodes[start]}");
    Console.WriteLine($"End: {nodes[end]}");
    var path = new HashSet<int>();
    long res = 0;
    void Visit(int node, long distance) {
        if (path.Contains(node)) {
            return;
        }
        if( node == nodes[end]) {
            Console.WriteLine(distance);
            res = Math.Max(res, distance);
            return;
        }

        path.Add(node);
        foreach (var e in graph[node]) {
            Visit(e.node, distance + e.distance);
        }

        path.Remove(node);
    }
    Visit(0,0);
    Console.WriteLine(res);
}
Part2b(inputReal);
public enum Direction {
    Up,
    Down,
    Left,
    Right
}